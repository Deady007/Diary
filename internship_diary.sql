-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jan 31, 2025 at 01:17 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `diary`
--

-- --------------------------------------------------------

--
-- Table structure for table `internship_diary`
--

CREATE TABLE `internship_diary` (
  `id` int(11) NOT NULL,
  `day` varchar(50) DEFAULT NULL,
  `topic` varchar(255) DEFAULT NULL,
  `summary` text DEFAULT NULL,
  `entry_date` date DEFAULT NULL,
  `type` enum('learning','development','holiday','reporting') DEFAULT 'learning'
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `internship_diary`
--

INSERT INTO `internship_diary` (`id`, `day`, `topic`, `summary`, `entry_date`, `type`) VALUES
(2, '1', 'PHP OOP CONCEPT ', ' Internship Summary at #Deepak Foundation: :# \r\n\r\n#Learning and Revision: :#  I began my internship by revisiting and clearing up the basics of Object-Oriented Programming (OOP) concepts in PHP to ensure a strong foundation for future tasks.\r\n\r\n#Introduction to Project/Tools: :#  I learned that my primary work will involve using Laravel, a PHP framework, for upcoming projects. This gives me a clear direction for the skills I need to focus on moving forward.\r\n\r\n#Plan for Tomorrow: :#  As part of my preparation, I plan to set up Laravel on my system tomorrow to begin hands-on learning and development with the framework.', '2024-12-16', 'learning'),
(3, '2', 'Laravel Installation, Basic App Setup, and Exploring MVC Structure', '#Laravel Setup and Basic App Creation: :# Successfully installed Laravel on my local machine and created a basic application. I hosted the application on localhost to ensure everything was functioning correctly.\r\n\r\n#Learning Laravel Fundamentals: :# Explored the official documentation to understand the core aspects of Laravel, including its MVC (Model-View-Controller) structure, routing, and other key concepts that form the foundation of Laravel applications.\r\n\r\n#Plan for Tomorrow: :# Tomorrow, I will focus on implementing CRUD (Create, Read, Update, Delete) operations in Laravel and build a basic app utilizing these functionalities. This will give me hands-on experience with database interactions and enhance my understanding of Laravel\'s capabilities.', '2024-12-17', 'learning'),
(4, '3', 'Implementing CRUD Operations in Laravel', 'Today, I focused on enhancing my skills with Laravel by implementing CRUD (Create, Read, Update, Delete) operations for a to-do list application. This involved several key steps:\r\n\r\n#Setting Up the Laravel Project: :# I began by installing a new Laravel project and configuring the database connection.\r\n\r\n#Creating a Model and Migration: :# I generated a model and migration for the Todo entity, defining the necessary fields such as title, description, and completed.\r\n\r\n#Defining Routes: :# I set up the resource routes for the Todo controller to handle the CRUD operations.\r\n\r\n#Building the Controller: :# I implemented the CRUD methods within the TodoController, including index, create, store, show, edit, update, and destroy.\r\n\r\n#Creating Views: :# I designed views for displaying the to-do list, creating new to-dos, editing existing to-dos, and viewing individual to-dos.\r\n\r\n#Testing the Application: :# Finally, I tested the application to ensure that all CRUD operations were working seamlessly.', '2024-12-18', 'learning'),
(5, '4', 'Breeze Authentication, AJAX with jQuery, and Project Overview', '#Breeze Authentication: :# Implemented Breeze authentication in Laravel for user registration and login functionalities. This process involved setting up authentication scaffolding to ensure secure user sign-ins.\r\n\r\n#AJAX with jQuery: :# Learned how to handle asynchronous requests using AJAX and jQuery to update parts of the webpage without a full reload. This will help in making the user experience more interactive and responsive.\r\n\r\n#Project Overview: :# Got an overview of the home-based palliative care software project explained by Darshna Dave. The application will manage patient data, assign IDs, and generate reports. Iâ€™ll be working on real-time data handling and integration with the field operations.\r\n\r\n#Plan for Tomorrow: :# Tomorrow, I will be visiting the field with the doctors and nurses to observe patient care processes. Iâ€™ll gather information that will help me better understand the requirements for the software.', '2024-12-19', 'learning'),
(6, '5', 'Requirements Gathering for Home-Based Palliative Care Project', '#Visit to Samaj Suraksha Sankul:#\r\nVisited the Samaj Suraksha Sankul facility based on the recommendation of project guide Mr. Ranjeet Rohit. The visit was aimed at understanding the challenges faced by the Home-Based Palliative Care project managed by Dr. Dhruv and Dr. Sakshi. Both doctors provided insights into the current operations, focusing on how patients are identified, admitted, and treated within their system.\r\n\r\nDr. Sakshi explained the process of using a \"case paper,\" which contains detailed patient information, including their symptoms and treatment plan. However, they are facing significant challenges in reaching patients who require home-based palliative care. Currently, the team visits SSG hospital to identify potential patients, then meets them directly to explain the program and convince them to join. Once a patient agrees, the facility admits them into the program and records their information manually in an Excel spreadsheet.\r\n\r\n#Challenges Identified:#\r\n\r\nPatient Identification Issues: The process of finding patients is highly reliant on visits to the hospital and convincing individuals to join the program. This method is time-consuming and inefficient, and it often leads to difficulties in identifying patients who would benefit most from the service.\r\nDatabase and MIS System Limitations: The team currently stores all patient details, including treatment and progress records, in Excel. This approach has significant limitations, such as data loss risks, lack of real-time updates, and the inability to generate comprehensive reports efficiently.\r\nManual Record-Keeping: The reliance on Excel for maintaining patient records and generating Management Information System (MIS) reports creates a bottleneck in operations. It is difficult to track patient progress accurately, and generating reports is a time-consuming process.\r\n#Observations during Visit:#\r\nDuring the visit, I accompanied Dr. Dhruv and a nurse to conduct a routine check-up on one of the home care patients. The hands-on visit provided insight into the actual process of patient care, helping me understand the challenges of monitoring patient progress in a home setting. This experience allowed me to observe the day-to-day operations, including the logistical and administrative challenges faced by the healthcare team.\r\n\r\nAfter the visit, I returned to the Deepak Foundation and reported the findings to Mr. Shardul Acharya, Deputy Director, who is overseeing the development of the software solution for this project. This feedback included detailed observations about the current methods of patient identification, record-keeping, and the need for an improved database and reporting system.\r\n\r\n#Reporting and Next Steps:#\r\nFollowing the visit, I compiled a report on the challenges identified and the observations made during the patient visit. The report was shared with the project head to ensure all issues were noted for the next phase of solution development. Given that Deepak Foundation observes weekends as week-offs, the work will resume on Monday.\r\n\r\n#Plan for Monday:#\r\nOn Monday, I plan to analyze the collected requirements in greater detail and start brainstorming potential solutions to address the database and MIS challenges. This will include exploring ways to streamline patient identification and develop a more efficient, secure system for storing and retrieving patient information. The goal is to reduce the manual effort involved, improve patient tracking, and create a more reliable system for reporting and decision-making.', '2024-12-20', 'learning'),
(7, '6', ' Scope of Projects and Creating Student App with Breeze Authentication', ' #Scope of the Home-Based Palliative Care Project:#\r\nOutlined the functional and technical scopes of the project to address the challenges identified during the visit to Samaj Suraksha Sankul. The primary goal is to streamline operations and enhance the efficiency of the palliative care program.\r\n\r\n#Patient Management:#\r\n\r\nCentralized database for storing patient records, including demographics, medical history, and treatment plans.\r\nAutomated generation of unique patient IDs for seamless tracking.\r\n\r\n#Appointment Scheduling & Coordination:#\r\n\r\nScheduling system for doctor and nurse visits to maximize resource utilization.\r\nAutomated notifications for scheduled visits or follow-ups to keep all stakeholders informed.\r\n\r\n#Communication Tools:#\r\n\r\nReal-time communication (text, audio, or video) between patients and doctors for quick consultations.\r\nHealth tracking updates from nurses to doctors after each visit.\r\n\r\n#Medical Treatment Plans:#\r\n\r\nDisease-specific protocols with guidelines for common palliative care conditions.\r\nMonitoring tools to evaluate and adjust treatment plans based on patient progress.\r\n\r\n#MIS Reports and Analytics:#\r\n\r\nAutomated report generation for internal use and presentations to stakeholders.\r\nData analysis for insights into trends, resource allocation, and service improvement.\r\n\r\n#Resource Management:#\r\n\r\nReal-time tracking of medical supplies and equipment.\r\nStaff allocation based on patient needs and resource availability.\r\n\r\n#Route Optimization:#\r\n\r\nAlgorithm-based route planning to minimize travel time for home visits.\r\n\r\n#Progress on Student App Development:#\r\nStarted creating a student app in Laravel with CRUD functionalities and user authentication using Laravel Breeze.\r\n\r\nAuthentication:\r\nImplemented user registration and login features with a focus on simplicity and security.\r\nCRUD Operations:\r\nDeveloped the framework for creating, reading, updating, and deleting student records.', '2024-12-23', 'reporting'),
(8, '7', 'Understanding Middleware, Exploring Database Relationships in Laravel and Creating a Proposal Presentation for Software Projects', 'Middleware\r\nMiddleware acts as a bridge between a request and response in a web application. It allows filtering and modifying HTTP requests before they reach the controller. In Laravel, middleware is used for tasks like authentication, logging, and input validation. Middleware is created using the make:middleware Artisan command, and it can be applied globally, to specific routes, or to route groups.\r\n\r\n\r\nRelationships\r\nIn database management, relationships define how different tables interact with each other. Laravel supports various relationship types like:\r\n\r\nOne-to-One: A single record in one table is related to one record in another table.\r\nOne-to-Many: A single record in one table is related to multiple records in another table.\r\nMany-to-Many: Multiple records in one table are related to multiple records in another table through a pivot table.\r\nThese relationships are implemented in Laravel models using Eloquent ORM methods (hasOne, belongsTo, hasMany, belongsToMany).\r\n\r\n\r\nThe proposal presentation outlines the key aspects of the project and includes the following topics:\r\nIntroduction: Provides an overview of the project, including its objectives and significance\r\nDomain: Defines the project\'s area of focus or industry context\r\nCompany Name: Deepak Foundation\r\nProject Scope: Create a software platform to manage patient data and healthcare delivery.\r\n  - Automate the patient identification, assignment, and reportingÂ process.\r\nProject Module: \r\n         -Patient Management: Collect and maintain patient details.\r\n         -ID Assignment: Generate unique IDs forÂ eachÂ patient.\r\n         -Healthcare Delivery: Track home visits and treatments.\r\n         -MIS Reporting: Generate reports for operationalÂ insights\r\nTools and Technology: \r\n         -Programming Language: PHP\r\n         â€¢ Framework: Laravel\r\n         â€¢ Frontend: HTML, CSS, Ajax Jquery\r\n         â€¢ Database: MySQL\r\n         â€¢ Version Control: Git\r\n         â€¢ Other Tools: Excel integration for initialÂ dataÂ handling\r\n\r\nRole: Full Stack Developer\r\nResponsibilities:\r\nDevelop backend logic for patient data management using Laravel.\r\nIntegrate database systems to ensure secure storage of patient information.\r\nCreate a module for generating and sharing MIS reports.\r\nCollaborate with doctors and nurses to optimize workflows.\r\n', '2024-12-24', 'learning'),
(9, '8', 'Database Design for Home-Based Palliative Project', 'Today, I worked on designing the database structure for the Home-based Palliative project. I focused on\r\ncreating tables and relationships for three key entities: Admin, Patient, and Doctor. This involved defining\r\nthe necessary fields and ensuring the relationships between these entities were correctly established to\r\nfacilitate efficient data management. The goal was to create a robust and scalable database system that would\r\nsupport the project\'s needs for tracking patient information, doctor assignments, and administrative tasks\r\nrelated to palliative care.\r\nDoctors Table: Designed to store doctor details such as name, specialization, contact information,\r\navailability, and hashed passwords for security.\r\nPatients Table: Created to capture patient data, including demographics, contact details, disease information,\r\ncase status, and doctor assignment via a foreign key.\r\nAppointments Table: Developed to track patient appointments with doctors, including appointment date, visit\r\nstatus, and related notes.\r\nMedical Reports Table: Structured to store detailed medical reports post-visit, covering symptoms, diagnosis,\r\ntreatment plans, and follow-up schedules.\r\nSchedule Table: Built to manage doctor availability by defining workdays and time slots.\r\nTasks Table: Introduced to keep track of tasks or reminders assigned to doctors, ensuring efficient task\r\nmanagement with status tracking.\r\nDiseases: Maintains a list of diseases that can be associated with patients.\r\nVisits: Records home care visits by doctors and nurses, including visit dates, treatments provided, and notes.\r\nLogin_Users (Optional): Manages authentication for staff and admin, with username, password, and roles', '2024-12-27', 'learning'),
(10, '9', 'Worked on creating an ER diagram and studied relationships[WAH]', 'Designed an Entity-Relationship (ER) Diagram to represent the database structure for the home-based palliative care project. The diagram visually models entities and their relationships, ensuring a clear understanding of data flow and dependencies.\r\n\r\nKey Entities:\r\n          Doctors: Stores doctor details, availability, and schedules.\r\n\r\n          Patients: Captures patient demographics, medical conditions, and assigned doctors.\r\n\r\n          Appointments: Tracks visit details, status, and doctor-patient associations.\r\n\r\n          Medical Reports: Records symptoms, diagnoses, treatments, and follow-up plans.\r\n\r\n          Schedules: Manages doctors\' weekly availability for appointments.\r\n\r\nPurpose :\r\n          The ER diagram provides a foundational blueprint to design a robust and scalable database, supporting features like patient tracking, doctor assignments, and report generation.\r\n\r\nRelationship Concepts:\r\n\r\nOne-to-One (Has One):\r\n          A single entity instance is associated with only one other instance.\r\n                    Example : Each Doctor has one Schedule to track their availability.\r\n\r\nOne-to-Many (Has Many):\r\n          A single entity instance is associated with multiple other instances.\r\n                    Example : A Doctor can handle multiple Appointments and manage several Tasks.\r\n\r\nOne-to-Many (Belongs To): \r\n          Specifies the inverse relationship, where a child entity belongs to a parent entity. \r\n                    Example: An appointment belongs to a doctor.\r\n                                    Each Appointment belongs to a specific Doctor and Patient\r\n\r\nHas One of Many:\r\n          A parent entity has one child entity from a set of possible related entities. \r\n                    Example:  A Patient can be assigned one current Doctor out of many available.\r\n\r\nSession Concept : \r\n     :-A session is a way to store temporary user-specific data on the server during a user\'s interaction with a web application. It helps maintain state across multiple requests since HTTP is stateless by nature.\r\n     :-Understood session management to store and retrieve temporary user data, such as logged-in caregiver details or active patient profiles.\r\n\r\n     Key Features :\r\n          Data Storage : Session stores data such as user ID, role, or preferences during their active session.\r\n\r\n          Temporary : The data persists only for the session\'s duration, typically until the user logs out or the session times out.\r\n\r\n          Identification : Each user session is uniquely identified using a session ID, usually stored in a browser cookie.\r\n\r\nExample in Home-Based Palliative Care Project:\r\n          A logged-in doctorâ€™s session can store their ID and name to fetch and display only their tasks, appointments, and schedules without querying the database repeatedly.\r\n          A nurseâ€™s session can track active patient profiles for seamless navigation between cases during home visits.', '2024-12-28', 'learning'),
(11, '10', 'ER Diagram Update, Use-Case Diagram, Enhancing the Existing TODO App', 'ER Diagram Update\r\n     The ER diagram has been updated to refine the database structure and relationships between entities such as Doctors, Patients, Appointments, Medical Reports, Schedules, and Tasks. This ensures accurate data representation and seamless integration of platform functionalities.\r\n\r\nUse-Case Diagram\r\n     The use-case diagram highlights interactions between system actors and their roles:\r\n\r\n     Administrator: Manages user accounts, assigns patient IDs, schedules appointments, manages patient records, and generates MIS reports.\r\n\r\n     Doctor: Records and manages patient records, tracks tasks, and contributes to MIS report generation.\r\n\r\n     Nurse: Focuses on recording medical reports and task tracking.\r\n\r\n     Patient: Views personalized care plans and monitors ongoing treatment.\r\n\r\n     Government Hospital System: Supplies patient data to streamline the process of patient identification and care assignment.\r\n\r\n     Key Use Cases\r\n\r\n          Manage User Accounts: Allows the Administrator to create, update, and remove users.\r\n\r\n          Assign Patient IDs: Systematically identifies patients based on data fetched from the Government Hospital System.\r\n\r\n          Schedule Appointments: Coordinates doctor-patient interactions for timely care.\r\n\r\n          Record Medical Reports: Enables doctors and nurses to document symptoms, diagnoses, and treatments.\r\n\r\n          Track Tasks: Ensures efficient management of tasks assigned to medical staff.\r\n\r\n          Generate MIS Report: Aggregates key metrics for administrative and operational insights.\r\n\r\n          View Care Plan: Provides patients with visibility into their treatment and progress.\r\n\r\n          Fetch Patient Data: Integrates with external systems for seamless patient identification.\r\n\r\nEnhancing the Existing TODO App\r\n          The TODO app has been upgraded to include robust user authentication features using Laravel\'s Auth class. This implementation provides \r\n          a seamless registration and login process, ensuring secure access for users. These enhancements improve both the app\'s functionality and \r\n          user experience, aligning it with modern security practices.', '2024-12-30', 'learning'),
(13, '11', 'Use Case Update, Laravel Sessions, Authorization with Gates\', \'', 'The use-case diagram was refined to provide a comprehensive view of system interactions:\\r\\n\\r\\n     Administrator: Manages user accounts, assigns patient IDs, schedules appointments, manages patient records, and generates MIS reports.\\r\\n\\r\\n     Doctor: Records and manages patient records, tracks tasks, and contributes to MIS report generation.\\r\\n\\r\\n     Patient: Views personalized care plans and monitors ongoing treatment.\\r\\n\\r\\nKey Use Cases:\\r\\n     Manage User Accounts: Allows the Administrator to create, update, and remove users.\\r\\n\\r\\n     Assign Patient IDs: Automatically identifies and assigns IDs to patients.\\r\\n\\r\\n     Schedule Appointments: Facilitates efficient scheduling of doctor-patient interactions.\\r\\n\\r\\n     Record Medical Reports: Enables recording of symptoms, diagnoses, and treatments.\\r\\n\\r\\n     Track Tasks: Organizes and monitors tasks assigned to staff members.\\r\\n\\r\\n     Generate MIS Report: Compiles key metrics for operational analysis.\\r\\n\\r\\n     View Care Plan: Offers patients insights into their care progress.\\r\\n\\r\\n\\r\\n1. Storing Data in Session\\r\\nYou can store data in the session using the session helper or the put method.\\r\\n\\r\\nExamples:\\r\\n     Using session Helper:\\r\\n          session([\\\'key\\\' => \\\'value\\\']);\\r\\n          This stores the value \\\'value\\\' with the key \\\'key\\\'.\\r\\n\\r\\n     Using put Method:\\r\\n          session()->put(\\\'key\\\', \\\'value\\\');\\r\\n          This achieves the same result.\\r\\n\\r\\n     Storing Multiple Values:\\r\\n          session([\\r\\n              \\\'key1\\\' => \\\'value1\\\',\\r\\n              \\\'key2\\\' => \\\'value2\\\',\\r\\n          ]);\\r\\n\\r\\n\\r\\n2. Retrieving Data from Session\\r\\nYou can retrieve data stored in the session using the session helper or the get method.\\r\\n\\r\\nExamples:\\r\\n     Using session Helper:\\r\\n          $value = session(\\\'key\\\');\\r\\n          This retrieves the value associated with \\\'key\\\'. If the key does not exist, it returns null.\\r\\n\\r\\n     Using get Method:\\r\\n          $value = session()->get(\\\'key\\\');\\r\\n\\r\\n     Setting a Default Value:\\r\\n          You can provide a default value to return if the key does not exist.\\r\\n          $value = session(\\\'key\\\', \\\'default_value\\\');\\r\\n\\r\\n\\r\\n Deleting Data from Session\\r\\nYou can delete specific session keys or clear all session data.\\r\\n\\r\\nExamples:\\r\\n     Removing a Single Key:\\r\\n          session()->forget(\\\'key\\\');\\r\\n          This removes the value associated with \\\'key\\\'.\\r\\n\\r\\n     Removing Multiple Keys:\\r\\n          session()->forget([\\\'key1\\\', \\\'key2\\\']);\\r\\n     \\r\\n     Clearing All Session Data:\\r\\n          session()->flush();\\r\\n          This removes all data from the session.\\r\\n\\r\\n\\r\\n4. Additional Methods for Session Management\\r\\n     Checking if a Key Exists:\\r\\n          if (session()->has(\\\'key\\\')) {\\r\\n              // Key exists\\r\\n          }\\r\\n\\r\\n     Adding a Value if the Key Doesn\\\'t Exist:\\r\\n          session()->put(\\\'key\\\', session()->get(\\\'key\\\', \\\'default_value\\\'));\\r\\n     \\r\\n     Pushing to an Array in Session:\\r\\n          session()->push(\\\'array_key\\\', \\\'new_value\\\');\\r\\n          Adds \\\'new_value\\\' to the array stored at \\\'array_key\\\'.\\r\\n\\r\\n\\r\\nStudied Laravel Gates, a feature for defining and managing user permissions:\\r\\n\\r\\n     Defining Gates: Created custom Gates in the AuthServiceProvider to authorize specific actions.\\r\\n          Example:\\r\\n               Gate::define(\\\'update-post\\\', function ($user, $post) {\\r\\n                   return $user->id === $post->user_id;\\r\\n               });\\r\\n     \\r\\n     Using Gates: Applied Gates across routes, Blade templates, controllers, and middleware.\\r\\n\\r\\n          In Routes: Restricted access to routes based on Gate permissions.\\r\\n\\r\\n          In Blade: Used @can and @cannot directives for dynamic content rendering.\\r\\n\\r\\n          In Controllers: Checked permissions to restrict unauthorized actions.\\r\\n     \\r\\n          In Middleware: Integrated Gates to enforce access control at the middleware level.\\r\\n\\r\\nThese updates ensure secure, role-based access control while improving system clarity and user interactions.\'', '2024-12-31', 'development'),
(14, '12', 'Sequence Diagram, Activity Diagram Design', 'The sequence diagram illustrates the flow of messages and interactions between actors and system components\\r\\n\\r\\nActors: Administrator, Doctor, Patient.\\r\\n\\r\\nSequence Diagram Components\\r\\n\\r\\n     1. Appointment\\r\\n          Demonstrates the flow of booking, confirming, and managing appointments between patients, doctors, and the system.  \\r\\n\\r\\n     2. Communication Tools \\r\\n          Outlines interactions facilitating communication between caregivers, medical professionals, and patients for effective coordination.  \\r\\n\\r\\n     3. Medical Treatment \\r\\n          Represents the process of delivering home-based care, including recording symptoms, diagnosis, and treatments by healthcare providers.  \\r\\n\\r\\n     4. MIS Report\\r\\n          Shows how data from various processes is aggregated to generate detailed Management Information System (MIS) reports for analysis and decision-making.  \\r\\n\\r\\n     5. Patient Feedback\\r\\n          Illustrates the collection and processing of feedback from patients to improve service quality and care.  \\r\\n\\r\\n     6. Resource Tracking and Allocation\\r\\n          Details the tracking of medical and human resources and their allocation to ensure optimal usage and availability.  \\r\\n\\r\\nThis detailed sequence diagram captures the key workflows within the system, ensuring clarity and aiding efficient implementation.\\r\\n\\r\\nActivity Diagram: \\r\\n     Appointment:\\r\\n          Illustrates the workflow for scheduling, managing, and confirming doctor-patient appointments efficiently.\\r\\n\\r\\n     Communication Tools:\\r\\n          Highlights how various communication channels are utilized for interactions between caregivers, medical professionals, and patients.\\r\\n\\r\\n     Medical Treatment:\\r\\n          Outlines the steps involved in delivering home-based care, including diagnosis, treatment planning, and follow-up procedures.\\r\\n\\r\\n     MIS Report:\\r\\n          Details the process of aggregating and analyzing data to generate comprehensive Management Information System (MIS) reports for\\r\\noperational insights.\\r\\n\\r\\n     Patient Feedback:\\r\\n          Represents the flow of collecting, analyzing, and acting on feedback provided by patients and their families to enhance service quality.\\r\\n\\r\\n     Resource Tracking and Allocation:\\r\\n          Tracks the utilization of resources such as staff, equipment, and medications, ensuring optimal allocation to meet patient needs.\\r\\n\\r\\nThese processes provide a clear view of the operational workflow and ensure efficient system management', '2025-01-02', 'learning'),
(15, '13', 'Implementing TOMTOM API for Mapping Functionality', 'Initially explored Google Maps API but switched to TOMTOM API due to cost concerns. Implemented TOMTOM API in the project, incorporating features to calculate the best route between a starting point and a destination, as well as to search for specific locations, including time and distance calculations.\\r\\n\\r\\n     Challenges with Google Maps API\\r\\n          -> While experimenting with Google Maps API, identified that its usage involved charges for certain services.\\r\\n          \\r\\n          -> Opted to seek alternative APIs that provide similar functionality without significant cost.\\r\\n\\r\\n     Challenges with Google Maps API\\r\\n         -> While experimenting with Google Maps API, identified that its usage involved charges for certain services.\\r\\n\\r\\n         ->Opted to seek alternative APIs that provide similar functionality without significant cost.\\r\\n\\r\\nTOMTOM API Integration:\\r\\n     The TOMTOM API was chosen as a cost-effective alternative and integrated successfully into the project. Key features implemented include:\\r\\n\\r\\n     => TOMTOM_API_KEY=0EuYAA4gcxB9Gb9DoGAA5H3fpeO51OVN\\r\\n\\r\\n     Best Route Calculation:\\r\\n          ->Allows users to input a starting point and destination.\\r\\n\\r\\n          ->Calculates the optimal route based on distance, traffic conditions, and estimated travel time.\\r\\n\\r\\n          ->API endpoint example:\\r\\n               => https://api.tomtom.com/routing/1/calculateRoute/{start}/{end}/json?key={API_KEY}\\r\\n\\r\\n     Search for Particular Locations:\\r\\n          -> Enables users to search for specific addresses, landmarks, or points of interest.\\r\\n\\r\\n          -> Returns results with geolocation data (latitude and longitude).\\r\\n\\r\\n          -> API endpoint example:\\r\\n                    => https://api.tomtom.com/search/2/search/{query}.json?key={API_KEY}\\r\\n\\r\\n     Time and Distance Calculation:\\r\\n          -> Provides precise measurements of travel time and distance between two locations.\\r\\n\\r\\n          -> Enhances user experience by giving realistic estimations for travel planning.\\r\\n\\r\\nAdvantages of TOMTOM API\\r\\n          -> Cost-Effectiveness: Lower implementation and usage costs compared to Google Maps API.\\r\\n\\r\\n          -> Customizability: Easy to configure and adapt to project-specific requirements.\\r\\n\\r\\n          -> Efficiency: Accurate and reliable routing and location services', '2025-01-08', 'learning'),
(16, '14', 'Routing and Map Integration with Geoapify API', 'Worked with multiple mapping APIs, including Routing API, Route Matrix API, and Map Matching API, to find optimal routes between destinations.\\r\\n\\r\\nSwitched from Azure Maps to Geoapify API due to cost considerations and successfully created a new Geoapify API key.\\r\\n\\r\\nRouting API\\r\\n     ->Utilized the Routing API to compute the best route between two destinations.\\r\\n\\r\\n     ->Implemented features to optimize travel paths considering distance, traffic, and road conditions.\\r\\n\\r\\n     ->Successfully configured to find the optimal route between starting and destination points.\\r\\n\\r\\n     ->Provides route details based on travel time and distance.\\r\\n\\r\\nRoute Matrix API\\r\\n     ->Used the Route Matrix API to calculate travel times and distances for multiple routes simultaneously.\\r\\n\\r\\n     ->Enabled the system to evaluate and recommend the fastest or most efficient paths.\\r\\n\\r\\n     ->Implemented to handle multiple routes simultaneously.\\r\\n\\r\\n     ->Features to evaluate and recommend the fastest paths were integrated but require debugging for visual outputs.\\r\\n\\r\\nMap Matching API\\r\\n     ->Integrated Map Matching API to align GPS data with the road network accurately.\\r\\n\\r\\n     ->Ensured precise positioning and route representation for improved navigation experience.\\r\\n\\r\\n     ->Aligned raw GPS data with road networks for enhanced precision.\\r\\n\\r\\n     ->Logical implementation completed, but the map rendering in the response failed.\\r\\n\\r\\n\\r\\nChallenges with Azure Maps:\\r\\n     ->Found Azure Maps to be cost-prohibitive for the project.\\r\\n\\r\\n     ->Map Display Issue: The map visualization did not render as expected.\\r\\n\\r\\nGeoapify API:\\r\\n     ->Selected Geoapify API as a cost-effective and feature-rich alternative.\\r\\n\\r\\n     ->Created a new API key', '2025-01-09', 'learning'),
(18, '15', 'Email Functionality and Password Recovery', 'Developed and implemented features for sending emails with subject and content, and integrating CC and BCC functionality using SMTP and\\r\\nsmtp.google.com. Additionally, implemented a forgot password feature to enhance user account management.\\r\\n\\r\\nSending Emails\\r\\n     ->Utilized SMTP with smtp.google.com for sending emails.\\r\\n\\r\\n     ->Features include:\\r\\n          ->Subject: Customizable email subject lines.\\r\\n\\r\\n          ->Content: Dynamic email content tailored to the recipient.\\r\\n\\r\\n          ->CC and BCC: Incorporated functionality to send carbon copies (CC) and blind carbon copies (BCC) to multiple recipients.\\r\\n\\r\\nForgot Password Feature\\r\\n     ->Implemented password recovery via email.\\r\\n\\r\\n     ->Steps include:\\r\\n          ->Generating a secure OTP for password reset.\\r\\n\\r\\n          ->Sending a reset OTP to the userâ€™s registered email.\\r\\n\\r\\n          ->Allowing users to set a new password securely.\\r\\n\\r\\nTechnologies Used\\r\\n     ->SMTP: For email transmission.\\r\\n\\r\\n     ->smtp.google.com: Configured for secure email delivery.\\r\\n\\r\\nThese features enhance the platformâ€™s usability, ensuring secure account management and reliable communication', '2025-01-10', 'holiday');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `internship_diary`
--
ALTER TABLE `internship_diary`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `internship_diary`
--
ALTER TABLE `internship_diary`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
